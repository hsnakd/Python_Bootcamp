Indentation: Indentation refers to the spaces at the beginning of a code line.
Comments: Comments are code lines that will not be executed.
Multiline Comments: How to insert comments on multiple lines.
Creating Variables: Variables are containers for storing data values.
Variable Names: How to name your variables.
Assign Values to Multiple Variables: How to assign values to multiple variables.
Output Variables: Use the print statement to output variables.
String Concatenation: How to combine strings.
Global Variables: Global variables are variables that belong to the global scope.
Built-In Data Types: Python has a set of built-in data types.
Getting Data Type: How to get the data type of an object.
Setting Data Type: How to set the data type of an object.
Numbers: There are three numeric types in Python: Int (integer), Float (floating-point), Complex (complex number).
Type Conversion: How to convert from one number type to another.
Random Number: How to create a random number.
Specify a Variable Type: How to specify a certain data type for a variable.
String Literals: How to create string literals.
Assigning a String to a Variable: How to assign a string value to a variable.
Multiline Strings: How to create a multiline string.
Strings are Arrays: Strings in Python are arrays of bytes representing Unicode characters.
Slicing a String: How to slice a string.
Negative Indexing on a String: How to use negative indexing when accessing a string.
String Length: How to get the length of a string.
Check In String: How to check if a string contains a specified phrase.
Format String: How to combine two strings.
Escape Characters: How to use escape characters.
Boolean Values: True or False.
Evaluate Booleans: Evaluate a value or statement and return either True or False.
Return Boolean Value: Functions that return a Boolean value.
Operators: Use operators to perform operations in Python.
Arithmetic Operators: Arithmetic operators are used to perform common mathematical operations.
Assignment Operators: Assignment operators are used to assign values to variables.
Comparison Operators: Comparison operators are used to compare two values.
Logical Operators: Logical operators are used to combine conditional statements.
Identity Operators: Identity operators are used to see if two objects are, in fact, the same object.
Membership Operators: Membership operators are used to test if a sequence is present in an object.
Bitwise Operators: Bitwise operators are used to compare (binary) numbers.
Lists: A list is an ordered, and changeable, collection.
Access List Items: How to access items in a list.
Change List Item: How to change the value of a list item.
Loop Through List Items: How to loop through the items in a list.
List Comprehension: How to use a list comprehension.
Check if List Item Exists: How to check if a specified item is present in a list.
List Length: How to determine the length of a list.
Add List Items: How to add items to a list.
Remove List Items: How to remove list items.
Copy a List: How to copy a list.
Join Two Lists: How to join two lists.
Tuple: A tuple is an ordered, and unchangeable, collection.
Access Tuple Items: How to access items in a tuple.
Change Tuple Item: How to change the value of a tuple item.
Loop List Items: How to loop through the items in a tuple.
Check if Tuple Item Exists: How to check if a specified item is present in a tuple.
Tuple Length: How to determine the length of a tuple.
Tuple With One Item: How to create a tuple with only one item.
Remove Tuple Items: How to remove tuple items.
Join Two Tuples: How to join two tuples.
Set: A set is an unordered, and unchangeable, collection.
Access Set Items: How to access items in a set.
Add Set Items: How to add items to a set.
Loop Set Items: How to loop through the items in a set.
Check if Set Item Exists: How to check if an item exists.
Set Length: How to determine the length of a set.
Remove Set Items: How to remove set items.
Join Two Sets: How to join two sets.
Dictionary: A dictionary is an unordered, and changeable, collection.
Access Dictionary Items: How to access items in a dictionary.
Change Dictionary Item: How to change the value of a dictionary item.
Loop Dictionary Items: How to loop through the items in a tuple.
Check if Dictionary Item Exists: How to check if a specified item is present in a dictionary.
Dictionary Length: How to determine the length of a dictionary.
Add Dictionary Item: How to add an item to a dictionary.
Remove Dictionary Items: How to remove dictionary items.
Copy Dictionary: How to copy a dictionary.
Nested Dictionaries: A dictionary within a dictionary.
If Statement: How to write an if statement.
If Indentation: If statements in Python rely on indentation (whitespace at the beginning of a line).
Elif: Elif is the same as "else if" in other programming languages.
Else: How to write an if...else statement.
Shorthand If: How to write an if statement in one line.
Shorthand If Else: How to write an if...else statement in one line.
If AND: Use the "and" keyword to combine if statements.
If OR: Use the "or" keyword to combine if statements.
If NOT: Use the "not" keyword to reverse the condition.
Nested If: How to write an if statement inside an if statement.
The pass Keyword in If: Use the "pass" keyword inside empty if statements.
While: How to write a while loop.
While Break: How to break a while loop.
While Continue: How to stop the current iteration and continue with the next.
While Else: How to use an else statement in a while loop.
For: How to write a for loop.
Loop Through a String: How to loop through a string.
For Break: How to break a for loop.
For Continue: How to stop the current iteration and continue with the next.
Looping Through a Range: How to loop through a range of values.
For Else: How to use an else statement in a for loop.
Nested Loops: How to write a loop inside a loop.
For pass: Use the "pass" keyword inside empty for loops.
Function: How to create a function in Python.
Call a Function: How to call a function in Python.
Function Arguments: How to use arguments in a function.
*args: To deal with an unknown number of arguments in a function, use the * symbol before the parameter name.
Keyword Arguments: How to use keyword arguments in a function.
**kwargs: To deal with an unknown number of keyword arguments in a function, use the * symbol before the parameter name.
Default Parameter Value: How to use a default parameter value.
Passing a List as an Argument: How to pass a list as an argument.
Function Return Value: How to return a value from a function.
The pass Statement in Functions: Use the "pass" statement in empty functions.
Function Recursion: Functions that can call itself are called recursive functions.
Lambda Function: How to create anonymous functions in Python.
Why Use Lambda Functions: Learn when to use a lambda function or not.
Array: Lists can be used as Arrays.
What is an Array: Arrays are variables that can hold more than one value.
Access Arrays: How to access array items.
Array Length: How to get the length of an array.
Looping Array Elements: How to loop through array elements.
Add Array Element: How to add elements from an array.
Remove Array Element: How to remove elements from an array.
Array Methods: Python has a set of Array/Lists methods.
Class: A class is like an object constructor.
Create Class: How to create a class.
The Class __init__() Function: The __init__() function is executed when the class is initiated.
Object Methods: Methods in objects are functions that belong to the object.
self: The self parameter refers to the current instance of the class.
Modify Object Properties: How to modify properties of an object.
Delete Object Properties: How to modify properties of an object.
Delete Object: How to delete an object.
Class pass Statement: Use the "pass" statement in empty classes.
Create Parent Class: How to create a parent class.
Create Child Class: How to create a child class.
Create the __init__() Function: How to create the __init__() function.
super() Function: The super() function makes the child class inherit the parent class.
Add Class Properties: How to add a property to a class.
Add Class Methods: How to add a method to a class.
Iterators: An iterator is an object that contains a countable number of values.
Iterator vs Iterable: What is the difference between an iterator and an iterable.
Loop Through an Iterator: How to loop through the elements of an iterator.
Create an Iterator: How to create an iterator.
StopIteration: How to stop an iterator.
Global Scope: When does a variable belong to the global scope?
Global Keyword: The global keyword makes the variable global.
Create a Module: How to create a module.
Variables in Modules: How to use variables in a module.
Renaming a Module: How to rename a module.
Built-in Modules: How to import built-in modules.
Using the dir() Function: List all variable names and function names in a module.
Import From Module: How to import only parts from a module.
Datetime Module: How to work with dates in Python.
Date Output: How to output a date.
Create a Date Object: How to create a date object.
The strftime Method: How to format a date object into a readable string.
Date Format Codes: The datetime module has a set of legal format codes.
JSON: How to work with JSON in Python.
Parse JSON: How to parse JSON code in Python.
Convert into JSON: How to convert a Python object into JSON.
Format JSON: How to format JSON output with indentations and line breaks.
Sort JSON: How to sort JSON.
RegEx Module: How to import the regex module.
RegEx Functions: The re module has a set of functions.
Metacharacters in RegEx: Metacharacters are characters with a special meaning.
RegEx Special Sequences: A backslash followed by a character has a special meaning.
RegEx Sets: A set is a set of characters inside a pair of square brackets with a special meaning.
RegEx Match Object: The Match Object is an object containing information about the search and the result.
Install PIP: How to install PIP.
PIP Packages: How to download and install a package with PIP.
PIP Remove Package: How to remove a package with PIP.
Error Handling: How to handle errors in Python.
Handle Many Exceptions: How to handle more than one exception.
Try Else: How to use the else keyword in a try statement.
Try Finally: How to use the finally keyword in a try statement.
raise: How to raise an exception in Python.



Indentation

Comments

Multiline Comments

Creating Variables

Variable Names

Assign Values to Multiple Variables

Output Variables

String Concatenation

Global Variables

Built-In Data Types

Getting Data Type

Setting Data Type

Numbers

Type Conversion

Random Number

Specify a Variable Type

String Literals

Assigning a String to a Variable

Multiline Strings

Strings are Arrays

Slicing a String

Negative Indexing on a String

String Length

Check In String

Format String

Escape Characters

Boolean Values

Evaluate Booleans

Return Boolean Value

Operators

Arithmetic Operators

Assignment Operators

Comparison Operators

Logical Operators

Identity Operators

Membership Operators

Bitwise Operators

Lists

Access List Items

Change List Item

Loop Through List Items

List Comprehension

Check if List Item Exists

List Length

Add List Items

Remove List Items

Copy a List

Join Two Lists

Tuple

Access Tuple Items

Change Tuple Item

Loop List Items

Check if Tuple Item Exists

Tuple Length

Tuple With One Item

Remove Tuple Items

Join Two Tuples

Set

Access Set Items

Add Set Items

Loop Set Items

Check if Set Item Exists

Set Length

Remove Set Items

Join Two Sets

Dictionary

Access Dictionary Items

Change Dictionary Item

Loop Dictionary Items

Check if Dictionary Item Exists

Dictionary Length

Add Dictionary Item

Remove Dictionary Items

Copy Dictionary

Nested Dictionaries

If Statement

If Indentation

Elif

Else

Shorthand If

Shorthand If Else

If AND

If OR

If NOT

Nested If

The pass Keyword in If

While

While Break

While Continue

While Else

For

Loop Through a String

For Break

For Continue

Looping Through a Range

For Else

Nested Loops

For pass

Function

Call a Function

Function Arguments
*args

Keyword Arguments
**kwargs

Default Parameter Value

Passing a List as an Argument

Function Return Value

The pass Statement in Functions

Function Recursion

Lambda Function

Why Use Lambda Functions

Array

What is an Array

Access Arrays

Array Length

Looping Array Elements

Add Array Element

Remove Array Element

Array Methods

Class

Create Class

The Class init() Function

Object Methods

self

Modify Object Properties

Delete Object Properties

Delete Object

Class pass Statement

Create Parent Class

Create Child Class

Create the init() Function

super() Function

Add Class Properties

Add Class Methods

Iterators

Iterator vs Iterable

Loop Through an Iterator

Create an Iterator

StopIteration

Global Scope

Global Keyword

Create a Module

Variables in Modules

Renaming a Module

Built-in Modules

Using the dir() Function

Import From Module

Datetime Module

Date Output

Create a Date Object

The strftime Method

Date Format Codes

JSON

Parse JSON

Convert into JSON

Format JSON

Sort JSON

RegEx Module

RegEx Functions

Metacharacters in RegEx

RegEx Special Sequences

RegEx Sets

RegEx Match Object

Install PIP

PIP Packages

PIP Remove Package

Error Handling

Handle Many Exceptions

Try Else

Try Finally

raise

